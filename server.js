app.get('/stream', (req, res) => {
  const magnet = req.query.magnet;
  if (!magnet) {
    console.log('‚ö†Ô∏è –õ–∏–ø—Å–≤–∞ magnet –ª–∏–Ω–∫');
    return res.status(400).send('–õ–∏–ø—Å–≤–∞ magnet –ª–∏–Ω–∫');
  }

  console.log(`‚è≥ –ü–æ–ª—É—á–µ–Ω –µ magnet –ª–∏–Ω–∫: ${magnet}`);

  client.add(magnet, torrent => {
    console.log(`üé¨ –î–æ–±–∞–≤—è–º —Ç–æ—Ä–µ–Ω—Ç: ${torrent.infoHash}`);

    const file = torrent.files.find(f => f.name.match(/\.(mp4|mkv|webm|avi)$/i));
    if (!file) {
      console.log('‚ö†Ô∏è –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –≤–∏–¥–µ–æ —Ñ–∞–π–ª');
      return res.status(404).send('–ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –≤–∏–¥–µ–æ —Ñ–∞–π–ª');
    }

    console.log(`‚ñ∂Ô∏è –°—Ç—Ä–∏–π–º —Ñ–∞–π–ª: ${file.name}`);

    res.setHeader('Content-Type', 'video/mp4');
    res.setHeader('Accept-Ranges', 'bytes');

    const range = req.headers.range;
    if (range) {
      const parts = range.replace(/bytes=/, '').split('-');
      const start = parseInt(parts[0], 10);
      const end = parts[1] ? parseInt(parts[1], 10) : file.length - 1;

      res.status(206);
      res.setHeader('Content-Range', `bytes ${start}-${end}/${file.length}`);
      res.setHeader('Content-Length', end - start + 1);
      file.createReadStream({ start, end }).pipe(res);
    } else {
      res.setHeader('Content-Length', file.length);
      file.createReadStream().pipe(res);
    }
  });

  client.on('torrent', function(torrent) {
    console.log(`üü¢ –°–≤—ä—Ä–∑–∞–Ω —Å –ø–∏–π—ä—Ä: ${torrent.infoHash}`);
  });
});
