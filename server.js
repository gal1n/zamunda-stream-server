const express = require('express');
const WebTorrent = require('webtorrent');
const cors = require('cors');

const app = express();
const client = new WebTorrent();
app.use(cors());

const PORT = process.env.PORT || 3000;

const torrents = new Map(); // –ó–∞ –∫–µ—à–∏—Ä–∞–Ω–µ –Ω–∞ –¥–æ–±–∞–≤–µ–Ω–∏ —Ç–æ—Ä–µ–Ω—Ç–∏

app.get('/get-files', (req, res) => {
  const magnet = req.query.magnet;
  if (!magnet) return res.status(400).send('–õ–∏–ø—Å–≤–∞ magnet –ª–∏–Ω–∫');

  console.log('‚è≥ –î–æ–±–∞–≤—è–º —Ç–æ—Ä–µ–Ω—Ç:', magnet);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –≤–µ—á–µ –µ –¥–æ–±–∞–≤–µ–Ω
  if (torrents.has(magnet)) {
    const torrent = torrents.get(magnet);
    const videoFiles = torrent.files.filter(f => f.name.match(/\.(mp4|mkv|webm|avi)$/i));
    console.log('üé¨ –ö–µ—à–∏—Ä–∞–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ:', videoFiles.map(f => f.name));
    return res.json(videoFiles.map(f => f.name));
  }

  client.add(magnet, torrent => {
    const videoFiles = torrent.files.filter(f => f.name.match(/\.(mp4|mkv|webm|avi)$/i));
    if (videoFiles.length === 0) return res.status(404).send('–ù—è–º–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤–µ –≤ —Ç–æ—Ä–µ–Ω—Ç–∞');

    torrents.set(magnet, torrent);
    console.log('üé¨ –ù–∞–ª–∏—á–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ:', videoFiles.map(f => f.name));

    return res.json(videoFiles.map(f => f.name));
  });
});

app.get('/stream', (req, res) => {
  const magnet = req.query.magnet;
  const filename = req.query.filename;

  if (!magnet || !filename) return res.status(400).send('–õ–∏–ø—Å–≤–∞ magnet –ª–∏–Ω–∫ –∏–ª–∏ –∏–º–µ –Ω–∞ —Ñ–∞–π–ª');

  const torrent = torrents.get(magnet);
  if (!torrent) return res.status(404).send('–¢–æ—Ä–µ–Ω—Ç—ä—Ç –Ω–µ –µ –∑–∞—Ä–µ–¥–µ–Ω. –ú–æ–ª—è, –ø—ä—Ä–≤–æ –∏–∑–≤–∏–∫–∞–π—Ç–µ /get-files');

  const file = torrent.files.find(f => f.name === filename);
  if (!file) return res.status(404).send('–§–∞–π–ª—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –≤ —Ç–æ—Ä–µ–Ω—Ç–∞');

  console.log('‚ñ∂Ô∏è –°—Ç—Ä–∏–π–º —Ñ–∞–π–ª:', file.name);

  res.setHeader('Content-Type', 'video/mp4');
  res.setHeader('Accept-Ranges', 'bytes');

  const range = req.headers.range;
  if (range) {
    const parts = range.replace(/bytes=/, '').split('-');
    const start = parseInt(parts[0], 10);
    const end = parts[1] ? parseInt(parts[1], 10) : file.length - 1;

    res.status(206);
    res.setHeader('Content-Range', `bytes ${start}-${end}/${file.length}`);
    res.setHeader('Content-Length', end - start + 1);
    file.createReadStream({ start, end }).pipe(res);
  } else {
    res.setHeader('Content-Length', file.length);
    file.createReadStream().pipe(res);
  }
});

app.listen(PORT, () => {
  console.log(`‚úÖ WebTorrent —Å—ä—Ä–≤—ä—Ä—ä—Ç —Ä–∞–±–æ—Ç–∏ –Ω–∞ http://localhost:${PORT}`);
});
